/* tslint:disable */
/* eslint-disable */
/**
 * RobustBoat API
 * API server for the RobustBoat voting system.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface LoginId200Response
 */
export interface LoginId200Response {
    /**
     * 
     * @type {string}
     * @memberof LoginId200Response
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface LoginId400Response
 */
export interface LoginId400Response {
    /**
     * 
     * @type {string}
     * @memberof LoginId400Response
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface LoginParameter
 */
export interface LoginParameter {
    /**
     * 
     * @type {string}
     * @memberof LoginParameter
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof LoginParameter
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface PollCreationParameter
 */
export interface PollCreationParameter {
    /**
     * 
     * @type {string}
     * @memberof PollCreationParameter
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof PollCreationParameter
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof PollCreationParameter
     */
    'creatorUserId': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PollCreationParameter
     */
    'options': Array<string>;
}
/**
 * 
 * @export
 * @interface PollInfo
 */
export interface PollInfo {
    /**
     * 
     * @type {number}
     * @memberof PollInfo
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PollInfo
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof PollInfo
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof PollInfo
     */
    'creatorUserId': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PollInfo
     */
    'options': Array<string>;
}
/**
 * 
 * @export
 * @interface UserRegisterParameter
 */
export interface UserRegisterParameter {
    /**
     * 
     * @type {string}
     * @memberof UserRegisterParameter
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof UserRegisterParameter
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UserRegisterParameter
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface VoteCreationParameter
 */
export interface VoteCreationParameter {
    /**
     * 
     * @type {Array<string>}
     * @memberof VoteCreationParameter
     */
    'pollOption': Array<string>;
}
/**
 * 
 * @export
 * @interface VoteInfo
 */
export interface VoteInfo {
    /**
     * 
     * @type {string}
     * @memberof VoteInfo
     */
    'userId': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof VoteInfo
     */
    'pollOption': Array<string>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a vote to a poll
         * @param {number} pollId 
         * @param {VoteCreationParameter} voteCreationParameter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVoteId: async (pollId: number, voteCreationParameter: VoteCreationParameter, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pollId' is not null or undefined
            assertParamExists('addVoteId', 'pollId', pollId)
            // verify required parameter 'voteCreationParameter' is not null or undefined
            assertParamExists('addVoteId', 'voteCreationParameter', voteCreationParameter)
            const localVarPath = `/polls/{pollId}/vote`
                .replace(`{${"pollId"}}`, encodeURIComponent(String(pollId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(voteCreationParameter, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new poll
         * @param {PollCreationParameter} pollCreationParameter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPollId: async (pollCreationParameter: PollCreationParameter, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pollCreationParameter' is not null or undefined
            assertParamExists('createPollId', 'pollCreationParameter', pollCreationParameter)
            const localVarPath = `/polls/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pollCreationParameter, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a specific poll
         * @param {number} pollId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPollId: async (pollId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pollId' is not null or undefined
            assertParamExists('getPollId', 'pollId', pollId)
            const localVarPath = `/polls/{pollId}`
                .replace(`{${"pollId"}}`, encodeURIComponent(String(pollId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a specific vote in a poll
         * @param {number} pollId 
         * @param {number} voteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoteId: async (pollId: number, voteId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pollId' is not null or undefined
            assertParamExists('getVoteId', 'pollId', pollId)
            // verify required parameter 'voteId' is not null or undefined
            assertParamExists('getVoteId', 'voteId', voteId)
            const localVarPath = `/polls/{pollId}/vote/{voteId}`
                .replace(`{${"pollId"}}`, encodeURIComponent(String(pollId)))
                .replace(`{${"voteId"}}`, encodeURIComponent(String(voteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary User login
         * @param {LoginParameter} loginParameter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginId: async (loginParameter: LoginParameter, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginParameter' is not null or undefined
            assertParamExists('loginId', 'loginParameter', loginParameter)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginParameter, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register a new user
         * @param {UserRegisterParameter} userRegisterParameter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerId: async (userRegisterParameter: UserRegisterParameter, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRegisterParameter' is not null or undefined
            assertParamExists('registerId', 'userRegisterParameter', userRegisterParameter)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRegisterParameter, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a vote to a poll
         * @param {number} pollId 
         * @param {VoteCreationParameter} voteCreationParameter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addVoteId(pollId: number, voteCreationParameter: VoteCreationParameter, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addVoteId(pollId, voteCreationParameter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.addVoteId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new poll
         * @param {PollCreationParameter} pollCreationParameter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPollId(pollCreationParameter: PollCreationParameter, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PollInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPollId(pollCreationParameter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createPollId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a specific poll
         * @param {number} pollId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPollId(pollId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PollInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPollId(pollId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getPollId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a specific vote in a poll
         * @param {number} pollId 
         * @param {number} voteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVoteId(pollId: number, voteId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoteInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVoteId(pollId, voteId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getVoteId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary User login
         * @param {LoginParameter} loginParameter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginId(loginParameter: LoginParameter, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginId200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginId(loginParameter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.loginId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Register a new user
         * @param {UserRegisterParameter} userRegisterParameter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerId(userRegisterParameter: UserRegisterParameter, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginId200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerId(userRegisterParameter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.registerId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a vote to a poll
         * @param {number} pollId 
         * @param {VoteCreationParameter} voteCreationParameter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVoteId(pollId: number, voteCreationParameter: VoteCreationParameter, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addVoteId(pollId, voteCreationParameter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new poll
         * @param {PollCreationParameter} pollCreationParameter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPollId(pollCreationParameter: PollCreationParameter, options?: RawAxiosRequestConfig): AxiosPromise<PollInfo> {
            return localVarFp.createPollId(pollCreationParameter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a specific poll
         * @param {number} pollId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPollId(pollId: number, options?: RawAxiosRequestConfig): AxiosPromise<PollInfo> {
            return localVarFp.getPollId(pollId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a specific vote in a poll
         * @param {number} pollId 
         * @param {number} voteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoteId(pollId: number, voteId: number, options?: RawAxiosRequestConfig): AxiosPromise<VoteInfo> {
            return localVarFp.getVoteId(pollId, voteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary User login
         * @param {LoginParameter} loginParameter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginId(loginParameter: LoginParameter, options?: RawAxiosRequestConfig): AxiosPromise<LoginId200Response> {
            return localVarFp.loginId(loginParameter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register a new user
         * @param {UserRegisterParameter} userRegisterParameter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerId(userRegisterParameter: UserRegisterParameter, options?: RawAxiosRequestConfig): AxiosPromise<LoginId200Response> {
            return localVarFp.registerId(userRegisterParameter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Add a vote to a poll
     * @param {number} pollId 
     * @param {VoteCreationParameter} voteCreationParameter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addVoteId(pollId: number, voteCreationParameter: VoteCreationParameter, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addVoteId(pollId, voteCreationParameter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new poll
     * @param {PollCreationParameter} pollCreationParameter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createPollId(pollCreationParameter: PollCreationParameter, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createPollId(pollCreationParameter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a specific poll
     * @param {number} pollId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPollId(pollId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPollId(pollId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a specific vote in a poll
     * @param {number} pollId 
     * @param {number} voteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVoteId(pollId: number, voteId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getVoteId(pollId, voteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary User login
     * @param {LoginParameter} loginParameter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public loginId(loginParameter: LoginParameter, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).loginId(loginParameter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register a new user
     * @param {UserRegisterParameter} userRegisterParameter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public registerId(userRegisterParameter: UserRegisterParameter, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).registerId(userRegisterParameter, options).then((request) => request(this.axios, this.basePath));
    }
}



